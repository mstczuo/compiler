

module AbsMCalc where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [Entity]
  deriving (Eq, Ord, Show, Read)

data Entity
    = Ettstm Stm | Ettfundec FunctionDeclare | Ettfundef Function
  deriving (Eq, Ord, Show, Read)

data FunctionDeclare = Fundec Type Ident [FuncDeclarg]
  deriving (Eq, Ord, Show, Read)

data Function = Fundef Type Ident [FuncDefarg] [Stm]
  deriving (Eq, Ord, Show, Read)

data FuncDeclarg
    = Vartypearg Type
    | Varnamearg Type Ident
    | Varinitarg Type Ident Exp
  deriving (Eq, Ord, Show, Read)

data FuncDefarg = Vararg Type Ident | Varargass Type Ident Exp
  deriving (Eq, Ord, Show, Read)

data VarDecl = DeclVar Ident | DeclVarInit Ident Exp
  deriving (Eq, Ord, Show, Read)

data Stm
    = SDecl Type [VarDecl]
    | SExp Exp
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SWhile Exp Stm
    | SReturn Exp
    | SRetnul
    | SPrint Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAssign Ident Exp
    | Edisjunc Exp Exp
    | Econjunc Exp Exp
    | Eeq Exp Exp
    | Eineq Exp Exp
    | Ecmplt Exp Exp
    | Ecmpgt Exp Exp
    | Ecmplet Exp Exp
    | Ecmpget Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | ENeg Exp
    | Epos Exp
    | Epreinc Ident
    | Epredec Ident
    | Epostinc Ident
    | Epostdec Ident
    | Efunc Ident
    | Efuncpar Ident [Exp]
    | Evar Ident
    | Econst Constant
  deriving (Eq, Ord, Show, Read)

data Constant
    = EString String
    | Eint Integer
    | EDouble Double
    | Ebool_false
    | Ebool_true
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TBool | TDouble | TString | TVoid
  deriving (Eq, Ord, Show, Read)

