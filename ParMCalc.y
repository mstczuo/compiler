-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParMCalc where
import AbsMCalc
import LexMCalc
import ErrM

}

%name pProgram Program
%name pEntity Entity
%name pFunctionDeclare FunctionDeclare
%name pFunction Function
%name pFuncDeclarg FuncDeclarg
%name pFuncDefarg FuncDefarg
%name pListFuncDeclarg ListFuncDeclarg
%name pListFuncDefarg ListFuncDefarg
%name pListEntity ListEntity
%name pListStm ListStm
%name pVarDecl VarDecl
%name pListVarDecl ListVarDecl
%name pStm Stm
%name pExp Exp
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp8 Exp8
%name pExp9 Exp9
%name pExp11 Exp11
%name pExp12 Exp12
%name pExp13 Exp13
%name pExp14 Exp14
%name pExp15 Exp15
%name pExp16 Exp16
%name pListExp2 ListExp2
%name pConstant Constant
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp10 Exp10
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '+' { PT _ (TS _ 6) }
  '++' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '--' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  'bool' { PT _ (TS _ 19) }
  'double' { PT _ (TS _ 20) }
  'else' { PT _ (TS _ 21) }
  'false' { PT _ (TS _ 22) }
  'if' { PT _ (TS _ 23) }
  'int' { PT _ (TS _ 24) }
  'print' { PT _ (TS _ 25) }
  'return' { PT _ (TS _ 26) }
  'string' { PT _ (TS _ 27) }
  'true' { PT _ (TS _ 28) }
  'void' { PT _ (TS _ 29) }
  'while' { PT _ (TS _ 30) }
  '{' { PT _ (TS _ 31) }
  '||' { PT _ (TS _ 32) }
  '}' { PT _ (TS _ 33) }

L_ident  { PT _ (TV $$) }
L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }

Program :: { Program }
Program : ListEntity { AbsMCalc.Prog (reverse $1) }
Entity :: { Entity }
Entity : Stm { AbsMCalc.Ettstm $1 }
       | FunctionDeclare { AbsMCalc.Ettfundec $1 }
       | Function { AbsMCalc.Ettfundef $1 }
FunctionDeclare :: { FunctionDeclare }
FunctionDeclare : Type Ident '(' ListFuncDeclarg ')' ';' { AbsMCalc.Fundec $1 $2 $4 }
Function :: { Function }
Function : Type Ident '(' ListFuncDefarg ')' '{' ListStm '}' { AbsMCalc.Fundef $1 $2 $4 (reverse $7) }
FuncDeclarg :: { FuncDeclarg }
FuncDeclarg : Type { AbsMCalc.Vartypearg $1 }
            | Type Ident { AbsMCalc.Varnamearg $1 $2 }
            | Type Ident '=' Exp { AbsMCalc.Varinitarg $1 $2 $4 }
FuncDefarg :: { FuncDefarg }
FuncDefarg : Type Ident { AbsMCalc.Vararg $1 $2 }
           | Type Ident '=' Exp { AbsMCalc.Varargass $1 $2 $4 }
ListFuncDeclarg :: { [FuncDeclarg] }
ListFuncDeclarg : {- empty -} { [] }
                | FuncDeclarg { (:[]) $1 }
                | FuncDeclarg ',' ListFuncDeclarg { (:) $1 $3 }
ListFuncDefarg :: { [FuncDefarg] }
ListFuncDefarg : {- empty -} { [] }
               | FuncDefarg { (:[]) $1 }
               | FuncDefarg ',' ListFuncDefarg { (:) $1 $3 }
ListEntity :: { [Entity] }
ListEntity : {- empty -} { [] }
           | ListEntity Entity { flip (:) $1 $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
VarDecl :: { VarDecl }
VarDecl : Ident { AbsMCalc.DeclVar $1 }
        | Ident '=' Exp { AbsMCalc.DeclVarInit $1 $3 }
ListVarDecl :: { [VarDecl] }
ListVarDecl : VarDecl { (:[]) $1 }
            | VarDecl ',' ListVarDecl { (:) $1 $3 }
Stm :: { Stm }
Stm : Type ListVarDecl ';' { AbsMCalc.SDecl $1 $2 }
    | Exp ';' { AbsMCalc.SExp $1 }
    | '{' ListStm '}' { AbsMCalc.SBlock (reverse $2) }
    | 'if' '(' Exp ')' Stm { AbsMCalc.SIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsMCalc.SIfElse $3 $5 $7 }
    | 'while' '(' Exp ')' Stm { AbsMCalc.SWhile $3 $5 }
    | 'return' Exp ';' { AbsMCalc.SReturn $2 }
    | 'return' ';' { AbsMCalc.SRetnul }
    | 'print' Exp ';' { AbsMCalc.SPrint $2 }
Exp :: { Exp }
Exp : Ident '=' Exp2 { AbsMCalc.EAssign $1 $3 } | Exp1 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp3 { AbsMCalc.Edisjunc $1 $3 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsMCalc.Econjunc $1 $3 } | Exp5 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { AbsMCalc.Eeq $1 $3 }
     | Exp8 '!=' Exp9 { AbsMCalc.Eineq $1 $3 }
     | Exp9 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp10 { AbsMCalc.Ecmplt $1 $3 }
     | Exp9 '>' Exp10 { AbsMCalc.Ecmpgt $1 $3 }
     | Exp9 '<=' Exp10 { AbsMCalc.Ecmplet $1 $3 }
     | Exp9 '>=' Exp10 { AbsMCalc.Ecmpget $1 $3 }
     | Exp10 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsMCalc.EAdd $1 $3 }
      | Exp11 '-' Exp12 { AbsMCalc.ESub $1 $3 }
      | Exp12 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp12 { AbsMCalc.EMul $1 $3 }
      | Exp12 '/' Exp12 { AbsMCalc.EDiv $1 $3 }
      | Exp13 { $1 }
Exp13 :: { Exp }
Exp13 : '-' Exp13 { AbsMCalc.ENeg $2 }
      | '+' Exp13 { AbsMCalc.Epos $2 }
      | '++' Ident { AbsMCalc.Epreinc $2 }
      | '--' Ident { AbsMCalc.Epredec $2 }
      | Exp14 { $1 }
Exp14 :: { Exp }
Exp14 : Ident '++' { AbsMCalc.Epostinc $1 }
      | Ident '--' { AbsMCalc.Epostdec $1 }
      | Exp15 { $1 }
Exp15 :: { Exp }
Exp15 : Ident '(' ')' { AbsMCalc.Efunc $1 }
      | Ident '(' ListExp2 ')' { AbsMCalc.Efuncpar $1 $3 }
      | Exp16 { $1 }
Exp16 :: { Exp }
Exp16 : Ident { AbsMCalc.Evar $1 }
      | Constant { AbsMCalc.Econst $1 }
      | '(' Exp ')' { $2 }
ListExp2 :: { [Exp] }
ListExp2 : {- empty -} { [] }
         | Exp2 { (:[]) $1 }
         | Exp2 ',' ListExp2 { (:) $1 $3 }
Constant :: { Constant }
Constant : String { AbsMCalc.EString $1 }
         | Integer { AbsMCalc.Eint $1 }
         | Double { AbsMCalc.EDouble $1 }
         | 'false' { AbsMCalc.Ebool_false }
         | 'true' { AbsMCalc.Ebool_true }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Exp10 :: { Exp }
Exp10 : Exp11 { $1 }
Type :: { Type }
Type : 'int' { AbsMCalc.TInt }
     | 'bool' { AbsMCalc.TBool }
     | 'double' { AbsMCalc.TDouble }
     | 'string' { AbsMCalc.TString }
     | 'void' { AbsMCalc.TVoid }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

